{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport fetchPonyfill from \"fetch-ponyfill\";\nimport { VERSION } from \"../version\";\n\nvar _a = fetchPonyfill(),\n    fetch = _a.fetch,\n    Headers = _a.Headers;\n\nvar ALCHEMY_HEADERS = new Headers({\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n  \"Alchemy-Web3-Version\": VERSION\n});\nvar RATE_LIMIT_STATUS = 429;\nexport function makeHttpSender(url) {\n  var _this = this;\n\n  return function (request) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var response, status, _a;\n\n      var _b, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , fetch(url, {\n              method: \"POST\",\n              headers: ALCHEMY_HEADERS,\n              body: JSON.stringify(request)\n            })];\n\n          case 1:\n            response = _d.sent();\n            status = response.status;\n            _a = status;\n\n            switch (_a) {\n              case 200:\n                return [3\n                /*break*/\n                , 2];\n\n              case RATE_LIMIT_STATUS:\n                return [3\n                /*break*/\n                , 4];\n\n              case 0:\n                return [3\n                /*break*/\n                , 5];\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 2:\n            _b = {\n              type: \"jsonrpc\"\n            };\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 3:\n            return [2\n            /*return*/\n            , (_b.response = _d.sent(), _b)];\n\n          case 4:\n            return [2\n            /*return*/\n            , {\n              type: \"rateLimit\"\n            }];\n\n          case 5:\n            return [2\n            /*return*/\n            , {\n              type: \"networkError\",\n              status: 0,\n              message: \"Connection failed.\"\n            }];\n\n          case 6:\n            _c = {\n              status: status,\n              type: \"networkError\"\n            };\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 7:\n            return [2\n            /*return*/\n            , (_c.message = _d.sent().message, _c)];\n        }\n      });\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"module"}