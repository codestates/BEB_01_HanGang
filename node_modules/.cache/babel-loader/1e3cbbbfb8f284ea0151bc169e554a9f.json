{"ast":null,"code":"import _regeneratorRuntime from \"/home/lhk/web3-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lhk/web3-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/lhk/web3-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/lhk/web3-practice/src/components/Create.js\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWalletConnected, mintNFT } from \"../utils/interact.js\";\n\nvar Minter = function Minter(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      walletAddress = _useState2[0],\n      setWallet = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      status = _useState4[0],\n      setStatus = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      name = _useState6[0],\n      setName = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      description = _useState8[0],\n      setDescription = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      url = _useState10[0],\n      setURL = _useState10[1];\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _yield$getCurrentWall, address, status;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getCurrentWalletConnected();\n\n          case 2:\n            _yield$getCurrentWall = _context.sent;\n            address = _yield$getCurrentWall.address;\n            status = _yield$getCurrentWall.status;\n            setWallet(address);\n            setStatus(status);\n            addWalletListener();\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), []);\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", function (accounts) {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus( /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }, \" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n        target: \"_blank\",\n        href: \"https://metamask.io/download.html\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }\n      }, \"You must install Metamask, a virtual Ethereum wallet, in your browser.\")));\n    }\n  }\n\n  var connectWalletPressed = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var walletResponse;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return connectWallet();\n\n            case 2:\n              walletResponse = _context2.sent;\n              setStatus(walletResponse.status);\n              setWallet(walletResponse.address);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function connectWalletPressed() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onMintPressed = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var _yield$mintNFT, success, status;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return mintNFT(url, name, description);\n\n            case 2:\n              _yield$mintNFT = _context3.sent;\n              success = _yield$mintNFT.success;\n              status = _yield$mintNFT.status;\n              setStatus(status);\n\n              if (success) {\n                setName(\"\");\n                setDescription(\"\");\n                setURL(\"\");\n              }\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function onMintPressed() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Minter\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"walletButton\",\n    onClick: connectWalletPressed,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"Connect Wallet\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \"\\uD83E\\uDDD9\\u200D\\u2642\\uFE0F Alchemy NFT Minter\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, \"Simply add your asset's link, name, and description, then press \\\"Mint.\\\"\"), /*#__PURE__*/React.createElement(\"form\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, \"\\uD83D\\uDDBC Link to asset: \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"e.g. https://gateway.pinata.cloud/ipfs/<hash>\",\n    onChange: function onChange(event) {\n      return setURL(event.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \"\\uD83E\\uDD14 Name: \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"e.g. My first NFT!\",\n    onChange: function onChange(event) {\n      return setName(event.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"\\u270D\\uFE0F Description: \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"e.g. Even cooler than cryptokitties ;)\",\n    onChange: function onChange(event) {\n      return setDescription(event.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"mintButton\",\n    onClick: onMintPressed,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, \"Mint NFT\"), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"status\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, status));\n};\n\nexport default Minter;","map":{"version":3,"sources":["/home/lhk/web3-practice/src/components/Create.js"],"names":["React","useEffect","useState","connectWallet","getCurrentWalletConnected","mintNFT","Minter","props","walletAddress","setWallet","status","setStatus","name","setName","description","setDescription","url","setURL","address","addWalletListener","window","ethereum","on","accounts","length","connectWalletPressed","walletResponse","onMintPressed","success","String","substring","event","target","value"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,yBAAxB,EAAmDC,OAAnD,QAAkE,sBAAlE;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAW;AAAA,kBAEWL,QAAQ,CAAC,EAAD,CAFnB;AAAA;AAAA,MAEjBM,aAFiB;AAAA,MAEFC,SAFE;;AAAA,mBAGIP,QAAQ,CAAC,EAAD,CAHZ;AAAA;AAAA,MAGjBQ,MAHiB;AAAA,MAGTC,SAHS;;AAAA,mBAIAT,QAAQ,CAAC,EAAD,CAJR;AAAA;AAAA,MAIjBU,IAJiB;AAAA,MAIXC,OAJW;;AAAA,mBAKcX,QAAQ,CAAC,EAAD,CALtB;AAAA;AAAA,MAKjBY,WALiB;AAAA,MAKJC,cALI;;AAAA,mBAMFb,QAAQ,CAAC,EAAD,CANN;AAAA;AAAA,MAMjBc,GANiB;AAAA,MAMZC,MANY;;AAQxBhB,EAAAA,SAAS,wEAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGwBG,yBAAyB,EAHjD;;AAAA;AAAA;AAGDc,YAAAA,OAHC,yBAGDA,OAHC;AAGQR,YAAAA,MAHR,yBAGQA,MAHR;AAIRD,YAAAA,SAAS,CAACS,OAAD,CAAT;AACAP,YAAAA,SAAS,CAACD,MAAD,CAAT;AAEAS,YAAAA,iBAAiB;;AAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAQR,EARQ,CAAT;;AAYA,WAASA,iBAAT,GAA6B;AAC3B,QAAIC,MAAM,CAACC,QAAX,EAAqB;AACnBD,MAAAA,MAAM,CAACC,QAAP,CAAgBC,EAAhB,CAAmB,iBAAnB,EAAsC,UAACC,QAAD,EAAc;AAClD,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACvBf,UAAAA,SAAS,CAACc,QAAQ,CAAC,CAAD,CAAT,CAAT;AACAZ,UAAAA,SAAS,CAAC,+CAAD,CAAT;AACD,SAHD,MAGO;AACLF,UAAAA,SAAS,CAAC,EAAD,CAAT;AACAE,UAAAA,SAAS,CAAC,oDAAD,CAAT;AACD;AACF,OARD;AASD,KAVD,MAUO;AACLA,MAAAA,SAAS,eACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,GADH,kBAEK,GAFL,eAGE;AAAG,QAAA,MAAM,EAAC,QAAV;AAAmB,QAAA,IAAI,qCAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kFAHF,CADO,CAAT;AAUD;AACF;;AAED,MAAMc,oBAAoB;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACEtB,aAAa,EADf;;AAAA;AACrBuB,cAAAA,cADqB;AAE3Bf,cAAAA,SAAS,CAACe,cAAc,CAAChB,MAAhB,CAAT;AACAD,cAAAA,SAAS,CAACiB,cAAc,CAACR,OAAhB,CAAT;;AAH2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAApBO,oBAAoB;AAAA;AAAA;AAAA,KAA1B;;AAMA,MAAME,aAAa;AAAA,yEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACctB,OAAO,CAACW,GAAD,EAAMJ,IAAN,EAAYE,WAAZ,CADrB;;AAAA;AAAA;AACZc,cAAAA,OADY,kBACZA,OADY;AACHlB,cAAAA,MADG,kBACHA,MADG;AAEpBC,cAAAA,SAAS,CAACD,MAAD,CAAT;;AACA,kBAAIkB,OAAJ,EAAa;AACXf,gBAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,gBAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,gBAAAA,MAAM,CAAC,EAAD,CAAN;AACD;;AAPmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAbU,aAAa;AAAA;AAAA;AAAA,KAAnB;;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,EAAE,EAAC,cAAX;AAA0B,IAAA,OAAO,EAAEF,oBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjB,aAAa,CAACgB,MAAd,GAAuB,CAAvB,GACC,gBACAK,MAAM,CAACrB,aAAD,CAAN,CAAsBsB,SAAtB,CAAgC,CAAhC,EAAmC,CAAnC,CADA,GAEA,KAFA,GAGAD,MAAM,CAACrB,aAAD,CAAN,CAAsBsB,SAAtB,CAAgC,EAAhC,CAJD,gBAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPJ,CADF,eAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,eAaE;AAAI,IAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAbF,eAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFAdF,eAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADF,eAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,+CAFd;AAGE,IAAA,QAAQ,EAAE,kBAACC,KAAD;AAAA,aAAWd,MAAM,CAACc,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAjB;AAAA,KAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAPF,eAQE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,oBAFd;AAGE,IAAA,QAAQ,EAAE,kBAACF,KAAD;AAAA,aAAWlB,OAAO,CAACkB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAlB;AAAA,KAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAbF,eAcE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,wCAFd;AAGE,IAAA,QAAQ,EAAE,kBAACF,KAAD;AAAA,aAAWhB,cAAc,CAACgB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAzB;AAAA,KAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,CAjBF,eAqCE;AAAQ,IAAA,EAAE,EAAC,YAAX;AAAwB,IAAA,OAAO,EAAEN,aAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBArCF,eAwCE;AAAG,IAAA,EAAE,EAAC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjB,MADH,CAxCF,CADF;AA8CD,CA3GD;;AA6GA,eAAeJ,MAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWalletConnected, mintNFT,} from \"../utils/interact.js\";\n\nconst Minter = (props) => {\n\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n  \n  useEffect(async () => {\n    //State variables\n    //TODO: implement\n    const {address, status} = await getCurrentWalletConnected();\n    setWallet(address)\n    setStatus(status); \n\n    addWalletListener(); \n}, []);\n\n\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  const connectWalletPressed = async () => { //TODO: implement\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => { //TODO: implement\n    const { success, status } = await mintNFT(url, name, description);\n    setStatus(status);\n    if (success) {\n      setName(\"\");\n      setDescription(\"\");\n      setURL(\"\");\n    }\n  };\n\n  return (\n    <div className=\"Minter\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <br></br>\n      <h1 id=\"title\">🧙‍♂️ Alchemy NFT Minter</h1>\n      <p>\n        Simply add your asset's link, name, and description, then press \"Mint.\"\n      </p>\n      <form>\n        <h2>🖼 Link to asset: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\n          onChange={(event) => setURL(event.target.value)}\n        />\n        <h2>🤔 Name: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. My first NFT!\"\n          onChange={(event) => setName(event.target.value)}\n        />\n        <h2>✍️ Description: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\n          onChange={(event) => setDescription(event.target.value)}\n        />\n      </form>\n      <button id=\"mintButton\" onClick={onMintPressed}>\n        Mint NFT\n      </button>\n      <p id=\"status\">\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport default Minter;"]},"metadata":{},"sourceType":"module"}