{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport assertNever from \"assert-never\";\nimport { delay, promisify } from \"../util/promises\";\nvar ALCHEMY_DISALLOWED_METHODS = [\"eth_accounts\", \"eth_sendTransaction\", \"eth_sign\", \"eth_signTypedData_v3\", \"eth_signTypedData\", \"personal_sign\"];\nexport function makePayloadSender(alchemySend, config) {\n  var currentWriteProvider = config.writeProvider;\n\n  var sendPayload = function sendPayload(payload) {\n    var disallowedMethod = getDisallowedMethod(payload);\n\n    if (!disallowedMethod) {\n      try {\n        return sendWithRetries(payload, alchemySend, config);\n      } catch (alchemyError) {\n        // Fallback to write provider, but if both fail throw the error from\n        // Alchemy.\n        if (!currentWriteProvider) {\n          throw alchemyError;\n        }\n\n        try {\n          return sendWithProvider(currentWriteProvider, payload);\n        } catch (_a) {\n          throw alchemyError;\n        }\n      }\n    } else {\n      if (!currentWriteProvider) {\n        throw new Error(\"No provider available for method \\\"\" + disallowedMethod + \"\\\"\");\n      }\n\n      return sendWithProvider(currentWriteProvider, payload);\n    }\n  };\n\n  function setWriteProvider(writeProvider) {\n    currentWriteProvider = writeProvider !== null && writeProvider !== void 0 ? writeProvider : null;\n  }\n\n  return {\n    sendPayload: sendPayload,\n    setWriteProvider: setWriteProvider\n  };\n}\n\nfunction sendWithProvider(provider, payload) {\n  var anyProvider = provider;\n  var sendMethod = (anyProvider.sendAsync ? anyProvider.sendAsync : anyProvider.send).bind(anyProvider);\n  return promisify(function (callback) {\n    return sendMethod(payload, callback);\n  });\n}\n\nfunction getDisallowedMethod(payload) {\n  var payloads = Array.isArray(payload) ? payload : [payload];\n  var disallowedRequest = payloads.find(function (p) {\n    return ALCHEMY_DISALLOWED_METHODS.indexOf(p.method) >= 0;\n  }) || undefined;\n  return disallowedRequest && disallowedRequest.method;\n}\n\nfunction sendWithRetries(payload, alchemySend, _a) {\n  var maxRetries = _a.maxRetries,\n      retryInterval = _a.retryInterval,\n      retryJitter = _a.retryJitter;\n  return __awaiter(this, void 0, void 0, function () {\n    var i, result, status_1, message, statusString;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          i = 0;\n          _b.label = 1;\n\n        case 1:\n          if (!(i < maxRetries + 1)) return [3\n          /*break*/\n          , 5];\n          return [4\n          /*yield*/\n          , alchemySend(payload)];\n\n        case 2:\n          result = _b.sent();\n\n          switch (result.type) {\n            case \"jsonrpc\":\n              return [2\n              /*return*/\n              , result.response];\n\n            case \"rateLimit\":\n              break;\n\n            case \"networkError\":\n              {\n                status_1 = result.status, message = result.message;\n                statusString = status_1 !== 0 ? \"(\" + status_1 + \") \" : \"\";\n                throw new Error(statusString + \" \" + message);\n              }\n\n            default:\n              return [2\n              /*return*/\n              , assertNever(result)];\n          }\n\n          return [4\n          /*yield*/\n          , delay(retryInterval + (retryJitter * Math.random() | 0))];\n\n        case 3:\n          _b.sent();\n\n          _b.label = 4;\n\n        case 4:\n          i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 5:\n          throw new Error(\"Rate limited for \" + (maxRetries + 1) + \" consecutive attempts.\");\n      }\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}