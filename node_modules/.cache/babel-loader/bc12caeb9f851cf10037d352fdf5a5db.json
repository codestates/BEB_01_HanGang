{"ast":null,"code":"import _regeneratorRuntime from \"/home/lhk/web3-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lhk/web3-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/lhk/web3-practice/src/utils/interact.js\";\n\nimport { pinJSONToIPFS } from \"./pinata.js\";\nimport React from 'react';\n\nrequire('dotenv').config();\n\nvar alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\n\nvar _require = require(\"@alch/alchemy-web3\"),\n    createAlchemyWeb3 = _require.createAlchemyWeb3;\n\nvar web3 = createAlchemyWeb3(alchemyKey);\n\nvar contractABI = require('../contract-abi.json');\n\nvar contractAddress = \"0x096e91e2aeb5627e27cf724ae36cda82edc74e1c\";\nexport var connectWallet = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var addressArray, obj;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!window.ethereum) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.prev = 1;\n            _context.next = 4;\n            return window.ethereum.request({\n              method: \"eth_requestAccounts\"\n            });\n\n          case 4:\n            addressArray = _context.sent;\n            obj = {\n              status: \"üëÜüèΩ Write a message in the text-field above.\",\n              address: addressArray[0]\n            };\n            return _context.abrupt(\"return\", obj);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            return _context.abrupt(\"return\", {\n              address: \"\",\n              status: \"üò• \" + _context.t0.message\n            });\n\n          case 12:\n            _context.next = 15;\n            break;\n\n          case 14:\n            return _context.abrupt(\"return\", {\n              address: \"\",\n              status: /*#__PURE__*/React.createElement(\"span\", {\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 35,\n                  columnNumber: 17\n                }\n              }, /*#__PURE__*/React.createElement(\"p\", {\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 36,\n                  columnNumber: 21\n                }\n              }, \" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n                target: \"_blank\",\n                href: \"https://metamask.io/download.html\",\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 39,\n                  columnNumber: 25\n                }\n              }, \"You must install Metamask, a virtual Ethereum wallet, in your browser.\")))\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9]]);\n  }));\n\n  return function connectWallet() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getCurrentWalletConnected = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var addressArray;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!window.ethereum) {\n              _context2.next = 17;\n              break;\n            }\n\n            _context2.prev = 1;\n            _context2.next = 4;\n            return window.ethereum.request({\n              method: \"eth_accounts\"\n            });\n\n          case 4:\n            addressArray = _context2.sent;\n\n            if (!(addressArray.length > 0)) {\n              _context2.next = 9;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {\n              address: addressArray[0],\n              status: \"üëÜüèΩ Write a message in the text-field above.\"\n            });\n\n          case 9:\n            return _context2.abrupt(\"return\", {\n              address: \"\",\n              status: \"ü¶ä Connect to Metamask using the top right button.\"\n            });\n\n          case 10:\n            _context2.next = 15;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](1);\n            return _context2.abrupt(\"return\", {\n              address: \"\",\n              status: \"üò• \" + _context2.t0.message\n            });\n\n          case 15:\n            _context2.next = 18;\n            break;\n\n          case 17:\n            return _context2.abrupt(\"return\", {\n              address: \"\",\n              status: /*#__PURE__*/React.createElement(\"span\", {\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 17\n                }\n              }, /*#__PURE__*/React.createElement(\"p\", {\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 21\n                }\n              }, \" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n                target: \"_blank\",\n                href: \"https://metamask.io/download.html\",\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 25\n                }\n              }, \"You must install Metamask, a virtual Ethereum wallet, in your browser.\")))\n            });\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 12]]);\n  }));\n\n  return function getCurrentWalletConnected() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nfunction loadContract() {\n  return _loadContract.apply(this, arguments);\n}\n\nfunction _loadContract() {\n  _loadContract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", new web3.eth.Contract(contractABI, contractAddress));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _loadContract.apply(this, arguments);\n}\n\nexport var mintNFT = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(url) {\n    var metadata, pinataResponse, tokenURI, transactionParameters, txHash;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(url.trim() == \"\")) {\n              _context3.next = 2;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", {\n              success: false,\n              status: \"‚ùóPlease make sure all fields are completed before minting.\"\n            });\n\n          case 2:\n            //make metadata\n            metadata = new Object();\n            metadata.name = name;\n            metadata.image = url;\n            metadata.description = description; //pinata pin request\n\n            _context3.next = 8;\n            return pinJSONToIPFS(metadata);\n\n          case 8:\n            pinataResponse = _context3.sent;\n\n            if (pinataResponse.success) {\n              _context3.next = 11;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", {\n              success: false,\n              status: \"üò¢ Something went wrong while uploading your tokenURI.\"\n            });\n\n          case 11:\n            tokenURI = pinataResponse.pinataUrl; //load smart contract\n\n            _context3.next = 14;\n            return new web3.eth.Contract(contractABI, contractAddress);\n\n          case 14:\n            window.contract = _context3.sent;\n            //loadContract();\n            //set up your Ethereum transaction\n            transactionParameters = {\n              to: contractAddress,\n              // Required except during contract publications.\n              from: window.ethereum.selectedAddress,\n              // must match user's active address.\n              'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract \n\n            }; //sign transaction via Metamask\n\n            _context3.prev = 16;\n            _context3.next = 19;\n            return window.ethereum.request({\n              method: 'eth_sendTransaction',\n              params: [transactionParameters]\n            });\n\n          case 19:\n            txHash = _context3.sent;\n            return _context3.abrupt(\"return\", {\n              success: true,\n              status: \"‚úÖ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\n            });\n\n          case 23:\n            _context3.prev = 23;\n            _context3.t0 = _context3[\"catch\"](16);\n            return _context3.abrupt(\"return\", {\n              success: false,\n              status: \"üò• Something went wrong: \" + _context3.t0.message\n            });\n\n          case 26:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[16, 23]]);\n  }));\n\n  return function mintNFT(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/lhk/web3-practice/src/utils/interact.js"],"names":["pinJSONToIPFS","React","require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","web3","contractABI","contractAddress","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","message","getCurrentWalletConnected","length","loadContract","eth","Contract","mintNFT","url","trim","success","metadata","Object","name","image","description","pinataResponse","tokenURI","pinataUrl","contract","transactionParameters","to","from","selectedAddress","methods","encodeABI","params","txHash"],"mappings":"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","sourcesContent":["import {pinJSONToIPFS} from \"./pinata.js\";\nimport React from 'react';\n\nrequire('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contractABI = require('../contract-abi.json')\nconst contractAddress = \"0x096e91e2aeb5627e27cf724ae36cda82edc74e1c\";\n\n\n\nexport const connectWallet = async () => {\n   \n    if (window.ethereum) {\n        try {\n            const addressArray = await window.ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n            const obj = {\n                status: \"üëÜüèΩ Write a message in the text-field above.\",\n                address: addressArray[0],\n            };\n            return obj;\n        } catch (err) {\n            return {\n                address: \"\",\n                status: \"üò• \" + err.message,\n            };\n        }\n    } else {\n        return {\n            address: \"\",\n            status: (\n                <span>\n                    <p>\n                        {\" \"}\n                        ü¶ä{\" \"}\n                        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                            You must install Metamask, a virtual Ethereum wallet, in your\n                            browser.\n                        </a>\n                    </p>\n                </span>\n            ),\n        };\n    }\n};\n\n\nexport const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n        try {\n            const addressArray = await window.ethereum.request({\n                method: \"eth_accounts\",\n            });\n            if (addressArray.length > 0) {\n                return {\n                    address: addressArray[0],\n                    status: \"üëÜüèΩ Write a message in the text-field above.\",\n                };\n            } else {\n                return {\n                    address: \"\",\n                    status: \"ü¶ä Connect to Metamask using the top right button.\",\n                };\n            }\n        } catch (err) {\n            return {\n                address: \"\",\n                status: \"üò• \" + err.message,\n            };\n        }\n    } else {\n        return {\n            address: \"\",\n            status: (\n                <span>\n                    <p>\n                        {\" \"}\n                        ü¶ä{\" \"}\n                        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                            You must install Metamask, a virtual Ethereum wallet, in your\n                            browser.\n                        </a>\n                    </p>\n                </span>\n            ),\n        };\n    }\n};\n\nasync function loadContract() {\n    return new web3.eth.Contract(contractABI, contractAddress);\n  }\n\nexport const mintNFT = async(url) => {\n\n    //error handling\n    if (url.trim() == \"\" ) { \n        return {\n            success: false,\n            status: \"‚ùóPlease make sure all fields are completed before minting.\",\n        }\n    }\n\n    //make metadata\n    const metadata = new Object();\n    metadata.name = name;\n    metadata.image = url;\n    metadata.description = description;\n\n    //pinata pin request\n    const pinataResponse = await pinJSONToIPFS(metadata);\n    if (!pinataResponse.success) {\n        return {\n            success: false,\n            status: \"üò¢ Something went wrong while uploading your tokenURI.\",\n        }\n    } \n    const tokenURI = pinataResponse.pinataUrl;  \n\n    //load smart contract\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);//loadContract();\n\n    //set up your Ethereum transaction\n    const transactionParameters = {\n        to: contractAddress, // Required except during contract publications.\n        from: window.ethereum.selectedAddress, // must match user's active address.\n        'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract \n    };\n\n    //sign transaction via Metamask\n    try {\n        const txHash = await window.ethereum\n            .request({\n                method: 'eth_sendTransaction',\n                params: [transactionParameters],\n            });\n        return {\n            success: true,\n            status: \"‚úÖ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\n        }\n    } catch (error) {\n        return {\n            success: false,\n            status: \"üò• Something went wrong: \" + error.message\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}