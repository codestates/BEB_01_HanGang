{"ast":null,"code":"import _toConsumableArray from \"/home/gunwoo/web3-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/gunwoo/web3-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/gunwoo/web3-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/gunwoo/web3-practice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gunwoo/web3-practice/src/App.js\";\n// import logo from './logo.svg';\nimport './App.css';\nimport { useState, useEffect } from \"react\";\nimport Web3 from 'web3';\nimport React from \"react\";\nimport erc721Abi from \"./erc721Abi\";\nimport TokenList from \"./components/TokenList\";\n\nfunction App() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      erc721list = _useState2[0],\n      setErc721list = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newErc721addr = _useState4[0],\n      setNewErc721Addr = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      web3 = _useState6[0],\n      setWeb3 = _useState6[1];\n\n  useEffect(function () {\n    if (typeof window.ethereum !== \"undefined\") {\n      // window.ethereum이 있다면\n      try {\n        var web = new Web3(window.ethereum); // 새로운 web3 객체를 만든다\n\n        setWeb3(web);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }, []);\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      account = _useState8[0],\n      setAccount = _useState8[1]; // ...\n\n\n  var connectWallet = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var accounts;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return window.ethereum.request({\n                method: \"eth_requestAccounts\"\n              });\n\n            case 2:\n              accounts = _context.sent;\n              setAccount(accounts[0]);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function connectWallet() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var addNewErc721Token = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var tokenContract, name, symbol, totalSupply, arr, i, _loop, _i, _arr;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return new web3.eth.Contract(erc721Abi, newErc721addr);\n\n            case 2:\n              tokenContract = _context3.sent;\n              _context3.next = 5;\n              return tokenContract.methods.name().call();\n\n            case 5:\n              name = _context3.sent;\n              _context3.next = 8;\n              return tokenContract.methods.symbol().call();\n\n            case 8:\n              symbol = _context3.sent;\n              _context3.next = 11;\n              return tokenContract.methods.totalSupply().call();\n\n            case 11:\n              totalSupply = _context3.sent;\n              arr = [];\n\n              for (i = 1; i <= totalSupply; i++) {\n                arr.push(i);\n              }\n\n              _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                var tokenId, tokenOwner, tokenURI;\n                return _regeneratorRuntime.wrap(function _loop$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        tokenId = _arr[_i];\n                        _context2.next = 3;\n                        return tokenContract.methods.ownerOf(tokenId).call();\n\n                      case 3:\n                        tokenOwner = _context2.sent;\n\n                        if (!(String(tokenOwner).toLowerCase() === account)) {\n                          _context2.next = 9;\n                          break;\n                        }\n\n                        _context2.next = 7;\n                        return tokenContract.methods.tokenURI(tokenId).call();\n\n                      case 7:\n                        tokenURI = _context2.sent;\n                        setErc721list(function (prevState) {\n                          return [].concat(_toConsumableArray(prevState), [{\n                            name: name,\n                            symbol: symbol,\n                            tokenId: tokenId,\n                            tokenURI: tokenURI\n                          }]);\n                        });\n\n                      case 9:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _loop);\n              });\n              _i = 0, _arr = arr;\n\n            case 16:\n              if (!(_i < _arr.length)) {\n                _context3.next = 21;\n                break;\n              }\n\n              return _context3.delegateYield(_loop(), \"t0\", 18);\n\n            case 18:\n              _i++;\n              _context3.next = 16;\n              break;\n\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function addNewErc721Token() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"metaConnect\",\n    onClick: function onClick() {\n      connectWallet();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, \"connect to MetaMask\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"userInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \"\\uC8FC\\uC18C: \", account), \"  // \\uC5F0\\uACB0\\uB41C \\uACC4\\uC815 \\uC8FC\\uC18C\\uB97C \\uD654\\uBA74\\uC5D0 \\uCD9C\\uB825\\uD569\\uB2C8\\uB2E4\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"newErc721\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: function onChange(e) {\n      setNewErc721Addr(e.target.value); // 입력받을 때마다 newErc721addr 갱신\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addNewErc721Token,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"add new erc721\")), /*#__PURE__*/React.createElement(TokenList, {\n    web3: web3,\n    account: account,\n    erc721list: erc721list,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/gunwoo/web3-practice/src/App.js"],"names":["useState","useEffect","Web3","React","erc721Abi","TokenList","App","erc721list","setErc721list","newErc721addr","setNewErc721Addr","web3","setWeb3","window","ethereum","web","err","console","log","account","setAccount","connectWallet","request","method","accounts","addNewErc721Token","eth","Contract","tokenContract","methods","name","call","symbol","totalSupply","arr","i","push","tokenId","ownerOf","tokenOwner","String","toLowerCase","tokenURI","prevState","e","target","value"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport { useState, useEffect } from \"react\";\nimport Web3 from 'web3';\nimport React from \"react\"\nimport erc721Abi from \"./erc721Abi\"\nimport TokenList from \"./components/TokenList\";\n\nfunction App() {\n  const [erc721list, setErc721list] = useState([]); \n\n  const [newErc721addr, setNewErc721Addr] = useState();\n\n  const [web3, setWeb3] = useState();\n    useEffect(() => {\n        if (typeof window.ethereum !== \"undefined\") { // window.ethereum이 있다면\n            try {\n                const web = new Web3(window.ethereum);  // 새로운 web3 객체를 만든다\n                setWeb3(web);\n            } catch (err) {\n                console.log(err);\n            }\n        }\n    }, []);\n\n  const [account, setAccount] = useState('');\n\t// ...\n  \n  const connectWallet = async () => {\n    const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n         });\n\n    setAccount(accounts[0]);\n};\n\nconst addNewErc721Token = async () => {\n  const tokenContract = await new web3.eth.Contract(\n      erc721Abi,\n      newErc721addr\n  );\n    const name = await tokenContract.methods.name().call();\n\t  const symbol = await tokenContract.methods.symbol().call();\n\t  const totalSupply = await tokenContract.methods.totalSupply().call();\n\n    let arr = [];\n\t\t  for (let i = 1; i <= totalSupply; i++) {\n\t\t      arr.push(i);\n\t\t  }\n      for (let tokenId of arr) {\n        let tokenOwner = await tokenContract.methods\n            .ownerOf(tokenId)\n            .call();\n        if (String(tokenOwner).toLowerCase() === account) {\n            let tokenURI = await tokenContract.methods\n                .tokenURI(tokenId)\n                .call();\n            setErc721list((prevState) => {\n                return [...prevState, { name, symbol, tokenId, tokenURI }];\n            });\n        }\n      }\n\n} \n\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n            <button\n                className=\"metaConnect\"\n                onClick={() => {\n                    connectWallet();\n                }}\n            >\n                connect to MetaMask\n            </button>\n        <div className=\"userInfo\">주소: {account}</div>  // 연결된 계정 주소를 화면에 출력합니다\n        \n        <div className=\"newErc721\">\n        <input\n            type=\"text\"\n            onChange={(e) => {\n                setNewErc721Addr(e.target.value);  // 입력받을 때마다 newErc721addr 갱신\n            }}\n        ></input>\n        <button onClick={addNewErc721Token}>add new erc721</button>\n      </div>    \n      <TokenList web3={web3} account={account} erc721list={erc721list} />\n    </div>\n   \n    \n  );\n}\n\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}